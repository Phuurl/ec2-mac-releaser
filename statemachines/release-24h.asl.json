{
  "Comment": "Release dedicated host after 24hrs",
  "StartAt": "waitSeconds Presence Check",
  "States": {
    "waitSeconds Presence Check": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.waitSeconds",
          "IsPresent": true,
          "Next": "Wait"
        }
      ],
      "Default": "waitSeconds 24hr default"
    },
    "waitSeconds 24hr default": {
      "Type": "Pass",
      "Next": "Wait",
      "Result": 86400,
      "ResultPath": "$.waitSeconds",
      "Comment": "Sets the waitSeconds parameter to 24 hours (86400) if not specified"
    },
    "Wait": {
      "Type": "Wait",
      "Comment": "Wait for waitSeconds parameter duration",
      "Next": "DescribeHosts",
      "SecondsPath": "$.waitSeconds"
    },
    "DescribeHosts": {
      "Type": "Task",
      "Next": "Hosts Map",
      "Parameters": {
        "HostIds.$": "$.targetHosts"
      },
      "Resource": "arn:aws:states:::aws-sdk:ec2:describeHosts",
      "ResultPath": "$.describeResults"
    },
    "Hosts Map": {
      "Type": "Map",
      "Next": "terminateInstances presence check",
      "Iterator": {
        "StartAt": "Tags Map",
        "States": {
          "Tags Map": {
            "Type": "Map",
            "Iterator": {
              "StartAt": "Preserve Tag Check",
              "States": {
                "Preserve Tag Check": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Or": [
                        {
                          "Variable": "$.Key",
                          "StringMatches": "preserve"
                        },
                        {
                          "Variable": "$.Key",
                          "StringMatches": "Preserve"
                        },
                        {
                          "Variable": "$.Key",
                          "StringMatches": "PRESERVE"
                        }
                      ],
                      "Next": "Preserved"
                    }
                  ],
                  "Default": "Non-preserved",
                  "Comment": "Check whether the preserve tag is present"
                },
                "Preserved": {
                  "Type": "Fail",
                  "Error": "Preserve",
                  "Cause": "Host tagged with preserve"
                },
                "Non-preserved": {
                  "Type": "Succeed"
                }
              }
            },
            "ItemsPath": "$.Tags",
            "ResultPath": null,
            "End": true
          }
        }
      },
      "ItemsPath": "$.describeResults.Hosts",
      "ResultPath": "$.preserveCheckResults"
    },
    "terminateInstances presence check": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.terminateInstances",
          "IsPresent": true,
          "Next": "terminateInstances Check"
        }
      ],
      "Default": "terminateInstances false default"
    },
    "terminateInstances false default": {
      "Type": "Pass",
      "Next": "terminateInstances Check",
      "Result": false,
      "ResultPath": "$.terminateInstances",
      "Comment": "Sets the terminateInstances parameter to false if not specified"
    },
    "terminateInstances Check": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.terminateInstances",
          "BooleanEquals": true,
          "Next": "Hosts Map 2"
        }
      ],
      "Default": "ReleaseHosts"
    },
    "Hosts Map 2": {
      "Type": "Map",
      "Next": "ReleaseHosts",
      "Iterator": {
        "StartAt": "DescribeHostInstances",
        "States": {
          "DescribeHostInstances": {
            "Type": "Task",
            "Parameters": {
              "Filters": [
                {
                  "Name": "host-id",
                  "Values.$": "States.Array($.HostId)"
                }
              ]
            },
            "Resource": "arn:aws:states:::aws-sdk:ec2:describeInstances",
            "ResultPath": "$.describeInstancesResult",
            "Next": "ReservationsMap"
          },
          "ReservationsMap": {
            "Type": "Map",
            "Iterator": {
              "StartAt": "InstancesMap",
              "States": {
                "InstancesMap": {
                  "Type": "Map",
                  "End": true,
                  "Iterator": {
                    "StartAt": "TerminateInstances",
                    "States": {
                      "TerminateInstances": {
                        "Type": "Task",
                        "Parameters": {
                          "InstanceIds.$": "States.Array($.InstanceId)"
                        },
                        "Resource": "arn:aws:states:::aws-sdk:ec2:terminateInstances",
                        "ResultPath": null,
                        "Next": "TerminateWait"
                      },
                      "TerminateWait": {
                        "Type": "Wait",
                        "Seconds": 60,
                        "Next": "DescribeTerminatedInstance",
                        "Comment": "Wait for 60s for instance to terminate"
                      },
                      "DescribeTerminatedInstance": {
                        "Type": "Task",
                        "Parameters": {
                          "InstanceIds.$": "States.Array($.InstanceId)"
                        },
                        "Resource": "arn:aws:states:::aws-sdk:ec2:describeInstances",
                        "Next": "Instance State Check",
                        "Comment": "Get target instance state"
                      },
                      "Instance State Check": {
                        "Type": "Choice",
                        "Choices": [
                          {
                            "Or": [
                              {
                                "Variable": "$.Reservations[0].Instances[0].State.Name",
                                "StringEquals": "stopping"
                              },
                              {
                                "Variable": "$.Reservations[0].Instances[0].State.Name",
                                "StringEquals": "shutting-down"
                              }
                            ],
                            "Comment": "Still terminating",
                            "Next": "TerminateWait 2"
                          },
                          {
                            "And": [
                              {
                                "Not": {
                                  "Variable": "$.Reservations[0].Instances[0].State.Name",
                                  "StringEquals": "stopping"
                                }
                              },
                              {
                                "Not": {
                                  "Variable": "$.Reservations[0].Instances[0].State.Name",
                                  "StringEquals": "shutting-down"
                                }
                              },
                              {
                                "Not": {
                                  "Variable": "$.Reservations[0].Instances[0].State.Name",
                                  "StringEquals": "terminated"
                                }
                              }
                            ],
                            "Comment": "Bad state",
                            "Next": "Fail"
                          }
                        ],
                        "Default": "Success"
                      },
                      "Fail": {
                        "Type": "Fail"
                      },
                      "Success": {
                        "Type": "Succeed",
                        "Comment": "Terminated"
                      },
                      "TerminateWait 2": {
                        "Type": "Wait",
                        "Seconds": 60,
                        "Next": "DescribeTerminatedInstance 2"
                      },
                      "DescribeTerminatedInstance 2": {
                        "Type": "Task",
                        "Parameters": {
                          "InstanceIds.$": "States.Array($.Reservations[0].Instances[0].InstanceId)"
                        },
                        "Resource": "arn:aws:states:::aws-sdk:ec2:describeInstances",
                        "Next": "Instance State Check"
                      }
                    }
                  },
                  "ItemsPath": "$.Instances"
                }
              }
            },
            "ItemsPath": "$.describeInstancesResult.Reservations",
            "End": true
          }
        }
      },
      "ItemsPath": "$.describeResults.Hosts",
      "ResultPath": null
    },
    "ReleaseHosts": {
      "Type": "Task",
      "Parameters": {
        "HostIds.$": "$.targetHosts"
      },
      "Resource": "arn:aws:states:::aws-sdk:ec2:releaseHosts",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 60,
          "MaxAttempts": 10,
          "Comment": "Retry x10 1m+"
        }
      ],
      "Next": "Unsuccessful Check",
      "ResultPath": "$.releaseResults"
    },
    "Unsuccessful Check": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.releaseResults.Unsuccessful[0]",
          "IsPresent": true,
          "Next": "Unsuccessful"
        }
      ],
      "Default": "Successful",
      "Comment": "Check if ReleaseHosts contains any 'Unsuccessful' entries"
    },
    "Unsuccessful": {
      "Type": "Fail",
      "Error": "ReleaseHost failed",
      "Cause": "Non-empty 'Unsuccessful' array in ReleaseHosts reponse",
      "Comment": "This won't be caught by Step Function's error handling apparently"
    },
    "Successful": {
      "Type": "Succeed"
    }
  }
}